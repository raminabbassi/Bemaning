@page "/admin/messages"
@using StaffingSolution.Interfaces
@using StaffingSolution.Models
@using StaffingSolution.Repositories
@using StaffingSolution.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject ContactRepository ContactRepo
@inject IAuthService AuthService
@inject NavigationManager Navigation
<link href="/css/Admin.css" rel="stylesheet" />

<h3 class="title">Inkomna Meddelanden</h3>

@if (!IsAdmin)
{
    <p class="error-message"> Åtkomst nekad! Du har inte behörighet att se denna sida.</p>
}
else if (messages == null)
{
    <p class="loading-message"> Laddar meddelanden...</p>
}
else if (messages.Count == 0)
{
    <p class="info-message"> Inga meddelanden att visa.</p>
}
else
{
    <EditForm Model="messageModel" OnValidSubmit="SubmitMarkAsReadAndReply">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <table class="message-table">
            <thead>
                <tr>
                    <th>Välj</th>
                    <th>ID</th>
                    <th>Namn</th>
                    <th>E-post</th>
                    <th>Meddelande</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var message in messages)
                {
                    <tr>
                        <td>
                            <InputCheckbox @bind-Value="message.Selected" />
                        </td>
                        <td>@message.Id</td>
                        <td>@message.Name</td>
                        <td>@message.Email</td>
                        <td>@message.Message</td>
                        <td>@(message.IsRead ? "Läst" : "Oläst")</td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-warning">Markera som läst och svara</button>
    </EditForm>
}

@code {
    private List<ContactMessage> messages = new();
    private bool IsAdmin = false;
    private MessageModel messageModel = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsAdmin = AuthService.IsAdmin();

            if (!IsAdmin)
            {
                Navigation.NavigateTo("/Unauthorized");
                Console.WriteLine($"Du har inte behörighet till denna sida");
                return;
            }

            messages = await ContactRepo.GetAllMessagesAsync() ?? new List<ContactMessage>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid hämtning av meddelanden: {ex.Message}");
        }
    }

    private async Task SubmitMarkAsReadAndReply()
    {
        try
        {
            var selectedMessages = messages.Where(m => m.Selected).ToList();

            if (selectedMessages.Any())
            {
                foreach (var message in selectedMessages)
                {
                    await ContactRepo.MarkMessageAsReadAsync(message.Id);

                    if (!string.IsNullOrEmpty(message.Email))
                    {
                        Console.WriteLine($"Navigerar till svarssidan för {message.Email}");
                        Navigation.NavigateTo($"/admin/reply?email={Uri.EscapeDataString(message.Email)}");
                        return;
                    }
                }

                messages = await ContactRepo.GetAllMessagesAsync() ?? new List<ContactMessage>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid uppdatering av meddelande: {ex.Message}");
        }
    }

    public class MessageModel
    {
        public HashSet<int> SelectedMessageIds { get; set; } = new();
    }
}
