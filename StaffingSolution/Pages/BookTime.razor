@page "/book-time"
@using StaffingSolution.Models
@using StaffingSolution.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject BookingService BookingService
@inject AuthService AuthService
@inject NavigationManager Navigation

<h3> Boka en tid</h3>

@if (AvailableTimes == null || AvailableTimes.Count == 0)
{
    <p> Inga tillgängliga tider just nu.</p>
}
else
{
    <EditForm Model="bookingModel" OnValidSubmit="SubmitBooking">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="selectedSlot">Välj en tillgänglig tid:</label>
            <InputSelect id="selectedSlot" @bind-Value="bookingModel.SelectedSlotId" class="form-control">
                <option value="">-- Välj en tid --</option>
                @foreach (var slot in AvailableTimes)
                {
                    <option value="@slot.Id">
                        @slot.StartTime.ToString("yyyy-MM-dd HH:mm") - @slot.EndTime.ToString("HH:mm")
                    </option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="userEmail">Din e-post:</label>
            <InputText id="userEmail" @bind-Value="bookingModel.UserEmail" class="form-control" />
            <ValidationMessage For="() => bookingModel.UserEmail" />
        </div>

        <button type="submit" class="btn btn-primary"> Boka tid</button>
    </EditForm>
}

@if (UserBookings != null && UserBookings.Count > 0)
{
    <h4> Dina bokade tider</h4>

    <EditForm Model="SelectedBooking" OnValidSubmit="CancelSelectedBooking">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="bookingSelect">Välj en bokad tid:</label>
            <InputSelect id="bookingSelect" @bind-Value="SelectedBookingId" class="form-control">
                <option value="">-- Välj en bokad tid --</option>
                @foreach (var booking in UserBookings)
                {
                    <option value="@booking.Id">
                        @($"{booking.BookedTime:yyyy-MM-dd HH:mm} - {booking.Schedule.EndTime:HH:mm}")
                    </option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-warning"> Avboka</button>
    </EditForm>
}


@code {
    private List<AdminSchedule> AvailableTimes = new();
    private List<Booking> UserBookings = new();
    private BookingModel bookingModel = new BookingModel();
    private int SelectedBookingId { get; set; }
    private Booking SelectedBooking { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AvailableTimes = await BookingService.GetAvailableTimesAsync();
        UserBookings = await BookingService.GetUserBookingsAsync(AuthService.GetCurrentUserEmail());
    }

    private async Task SubmitBooking()
    {
        if (bookingModel.SelectedSlotId == 0)
        {
            Console.WriteLine(" Ingen tid vald!");
            return;
        }

        bool success = await BookingService.BookTimeAsync(bookingModel.SelectedSlotId, bookingModel.UserEmail);
        if (success)
        {
            Console.WriteLine(" Bokning lyckades!");
            AvailableTimes = await BookingService.GetAvailableTimesAsync();
            UserBookings = await BookingService.GetUserBookingsAsync(AuthService.GetCurrentUserEmail());
        }
        else
        {
            Console.WriteLine(" Bokningen misslyckades!");
        }
    }

    private async Task CancelSelectedBooking()
    {
        if (SelectedBookingId > 0)
        {
            await BookingService.CancelBookingAsync(SelectedBookingId);
            UserBookings = await BookingService.GetUserBookingsAsync(bookingModel.UserEmail);
            SelectedBookingId = 0; 
        }
    }

    public class BookingModel
    {
        public int SelectedSlotId { get; set; }
        public string UserEmail { get; set; } 
    }
}
